@using AnsibeProject.Models;
@model List<Course>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
    
    <div id="partial-view"></div>
<section class="courses" >
    <div class="box-container">
       
        <form class="box" >
            <h1>Courses</h1>
            <table class="table table-striped">
                <thead>
                <th>Course Code</th>
                <th>Course Description</th>
                <th>Course Hour</th>
                <th>TD</th>
                <th>TP</th>
                <th>Language</th>
                <th>Add</th>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        @foreach (var course in Model)
                        {
                            if (course.CourseState.Equals(ActiveState.Active))
                            {
                                <tr id="@course.CourseCode">
                                    <td>
                                        @course.CourseCode
                                    </td>
                                    <td>
                                        @course.CourseDescription
                                    </td>
                                    <td>
                                        <input type="checkbox" name="c[]" />
                                    </td>
                                    <td>
                                        <input type="checkbox" name="c[]" />
                                    </td>
                                    <td>
                                        <input type="checkbox" name="c[]" />
                                    </td>
                                    <td>
                                        <select asp-items="Html.GetEnumSelectList<AnsibeProject.Models.Language>()">
                                            
                                        </select>
                                    </td>
                                    <td>
                                        <button class="inline-btn" onclick="SaveList(this,'@course.CourseCode','@course.CourseDescription', @course.NumberOfHours,@course.TP,@course.TD)" type="button">Add</button>
                                    </td>
                                    
                                </tr>
                             
                            }

                        }
                    }
                </tbody>
            </table>
            <button type="button" class="inline-btn" onclick="SubmitSection()">save</button>
        </form>
    </div>

</section>
@section Scripts {
    <script>
        var sections = [];
        function SaveList(button, CourseCode, CourseDescription, CourseHours, TP, TD) {
            var model = {
                SectionId: undefined,
                Course: {
                    CourseCode:CourseCode
                },
                Professor: null,
                TP: undefined,
                TD: undefined,
                CourseHours: undefined,
                Language: undefined
            };


            // Get the parent row of the button (i.e., the row containing the button)
            var tr = document.getElementById(CourseCode);

            // Get all checkboxes within the form
            var checkboxes = tr.querySelectorAll('input[type="checkbox"]');
            var option = tr.querySelector('select');
            var selectedText = option.options[option.selectedIndex].textContent;

            model.Language = selectedText
            model.Course.CourseCode = CourseCode

            // Filter checked checkboxes
            var checkedCheckboxes = [];
            var i = 0;
            checkboxes.forEach(function (checkbox) {
                checkedCheckboxes.push(checkbox.checked);

                if (checkbox.checked) {
                    i++;
                    checkbox.checked = false;
                }
            });

            model.CourseHours = (checkedCheckboxes[0]) ? CourseHours : null;
            model.TD = (checkedCheckboxes[1]) ? TD : null;
            model.TP = (checkedCheckboxes[2]) ? TP : null;


            if (i > 0) {


                // Create a new row and cells
                var newRow = document.createElement("tr");
                var newCell1 = document.createElement("td");
                var newCell2 = document.createElement("td");
                var newCell3 = document.createElement("td");
                var newCell4 = document.createElement("td");
                var newCell5 = document.createElement("td");
                var newCell6 = document.createElement("td");
                var newCell7 = document.createElement("td")
                // Add content to the new cells (e.g., text or input elements)
                // newCell1.classList.toggle("tr-section");
                newCell1.style.backgroundColor = "#0d6efd40";
                newCell2.style.backgroundColor = "#0d6efd40";
                newCell1.textContent = CourseCode;
                newCell2.textContent = CourseDescription;
                newRow.appendChild(newCell1);
                newRow.appendChild(newCell2);
                createCheckboxesWithStates(checkedCheckboxes, newRow);
                newCell6.style.backgroundColor = "#0d6efd40";
                newCell6.textContent = selectedText;

                // Append cells to the new row

                newRow.appendChild(newCell6);
                newCell7.style.backgroundColor = "0d6efd40"
                newRow.appendChild(newCell7);
                var btn = document.createElement("button");
                btn.type = "button";
                btn.textContent = "delete"
                btn.onclick = function () {
                    confirmDelete(this);
                };
                btn.classList.toggle("inline-delete-btn");
                newCell7.appendChild(btn)
                // Insert the new row after the parent row
                tr.parentNode.insertBefore(newRow, tr.nextSibling);
                sections.push(model);
            }
            else {
                Swal.fire("at least one checkbox should be checked", "", "info");

            }
        }
        function createCheckboxesWithStates(checkboxStates, newRow) {


            // Clear existing checkboxes


            // Create new checkboxes based on saved states
            for (var i = 0; i < checkboxStates.length; i++) {
                var td = document.createElement('td');

                newRow.appendChild(td);
                var input = document.createElement('input');
                input.type = 'checkbox';
                input.checked = checkboxStates[i];
                input.disabled = true;
                td.style.backgroundColor = "#0d6efd40";
                td.appendChild(input);

                // You can set values or labels for the checkboxes as needed


            }
            
        }
        function DeleteSection(button) {
            var parentRow = button.parentNode.parentNode;
            parentRow.innerHTML = "";
          
        }
        function confirmDelete(button) {
            Swal.fire({
                title: "Are you sure you want to delete this professor?",
                text: "This action cannot be undone. you can Deactivate",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#d33",
                cancelButtonColor: "#3085d6",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    // If user confirms, perform the delete action
                    DeleteSection(button)
                } else {
                    // If user cancels, show an informational message
                    Swal.fire("Deletion cancelled", "", "info");
                }
            });
        }
        function SubmitSection(){
            fetch('/Home/AddSection', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(sections)
            })
                .then(response => response.json())
                .then(data => {
                    // Handle response if needed
                    $('#partial-view').html(data)

                })
                .catch(error => {
                    // Handle error
                });
        });
        sections = []
        }
    </script>
}